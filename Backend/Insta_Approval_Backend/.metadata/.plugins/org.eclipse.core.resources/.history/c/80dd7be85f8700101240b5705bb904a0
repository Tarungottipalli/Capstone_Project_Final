package com.example.insta_approval_backend.controller;

import java.util.List;

import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.example.insta_approval_backend.DTO.DocumentUploadResponse;
import com.example.insta_approval_backend.model.Document;
import com.example.insta_approval_backend.model.User;
import com.example.insta_approval_backend.service.DocumentService;

@RestController
@RequestMapping("/api/v1/documents")
@CrossOrigin("*")
public class DocumentController {

    private final DocumentService documentService;
    public DocumentController(DocumentService documentService) {
        this.documentService = documentService;
    }

    // Upload
    @PostMapping(value = "/upload/{loanId}", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<DocumentUploadResponse> uploadDocument(
            @PathVariable Long loanId,
            @RequestParam("file") MultipartFile file,
    		@RequestParam("documentType") String documentType,
    		@AuthenticationPrincipal User user)
    {

    	 Document doc = documentService.uploadDocument(loanId, file, documentType);

        DocumentUploadResponse resp = new DocumentUploadResponse();
        resp.setDocumentId(doc.getDocumentId());
        resp.setFileName(doc.getFileName());
        resp.setFileType(doc.getFileType());
        resp.setDocumentType(doc.getDocumentType());
        resp.setLoanApplicationId(doc.getLoanApplication().getApplicationId());

        return ResponseEntity.ok(resp);
    }

    @GetMapping("/{docId}")
    public ResponseEntity<byte[]> downloadDocument(@PathVariable Long docId) {
        Document doc = documentService.getDocument(docId);

        return ResponseEntity.ok()
                .contentType(MediaType.parseMediaType(doc.getFileType()))
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + doc.getFileName() + "\"")
                .body(doc.getFileData());   // âœ… return from DB
    }

    // Delete
    @DeleteMapping("/{docId}")
    public ResponseEntity<String> deleteDocument(@PathVariable Long docId) {
        documentService.deleteDocument(docId);
        return ResponseEntity.ok("Document deleted successfully");
    }
    
    @GetMapping("/loan/{loanId}")
    public ResponseEntity<List<DocumentUploadResponse>> getDocumentsByLoan(@PathVariable Long loanId) {
        return ResponseEntity.ok(documentService.getDocumentsByLoan(loanId));
    }
}
