package com.example.insta_approval_backend.service;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ResponseStatusException;

import com.example.insta_approval_backend.model.Document;
import com.example.insta_approval_backend.model.LoanApplication;
import com.example.insta_approval_backend.repositoriy.DocumentRepository;
import com.example.insta_approval_backend.repositoriy.LoanApplicationRepository;

import jakarta.persistence.criteria.Path;

@Service
public class DocumentService {

    private final DocumentRepository documentRepo;
    private final LoanApplicationRepository loanRepo;

    @Value("${file.upload-dir}")
    private String uploadDir;

    public DocumentService(DocumentRepository documentRepo, LoanApplicationRepository loanRepo) {
        this.documentRepo = documentRepo;
        this.loanRepo = loanRepo;
    }

    // Upload & save metadata
    public Document uploadDocument(Long loanId, MultipartFile file) {
        LoanApplication loan = loanRepo.findById(loanId)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Loan not found"));

        try {
            // Ensure upload directory exists
            Path dirPath = Paths.get(uploadDir);
            if (!Files.exists(dirPath)) {
                Files.createDirectories(dirPath);
            }

            // Save file to disk
            String fileName = System.currentTimeMillis() + "_" + file.getOriginalFilename();
            Path filePath = dirPath.resolve(fileName);
            file.transferTo(filePath.toFile());

            // Save document metadata in DB
            Document doc = Document.builder()
                    .loanApplication(loan)
                    .fileName(file.getOriginalFilename())
                    .fileType(file.getContentType())
                    .filePath(filePath.toString())
                    .uploadDate(LocalDateTime.now())
                    .build();

            return documentRepo.save(doc);

        } catch (IOException e) {
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "File upload failed");
        }
    }

    // Download
    public byte[] downloadDocument(Long docId) {
        Document doc = documentRepo.findById(docId)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Document not found"));

        try {
            return Files.readAllBytes(Paths.get(doc.getFilePath()));
        } catch (IOException e) {
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "File read failed");
        }
    }

    // Delete
    public void deleteDocument(Long docId) {
        Document doc = documentRepo.findById(docId)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Document not found"));

        try {
            Files.deleteIfExists(Paths.get(doc.getFilePath()));
        } catch (IOException e) {
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "File delete failed");
        }

        documentRepo.delete(doc);
    }
}